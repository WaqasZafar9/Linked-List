#include <iostream>
using namespace std;

class node {
public:
    node* prev;
    int data;
    node* next;

    node(int value)
    { // A constructor is called here
        prev = NULL; 
        data = value; 
        next = NULL;
    }
};
    
node* reverse(node* head) {
    if (head != NULL) {
        node* prevptr = head;
        node* crntptr = head;
        node* nextptr = head->next;

        prevptr->next = NULL;
        crntptr->next = NULL;

        while (nextptr != NULL) {
            crntptr = nextptr->next;
            nextptr->next = prevptr;
            prevptr->prev = nextptr;
            prevptr = nextptr;
            nextptr = crntptr;

        }
        head = prevptr; 
        return prevptr;
    }
}

void insert_at_head(node*& head)
{
    for (int a = 0;a <= 5;a++) {
        node* n = new node(a);
   
        n->next = head;
        if (head != NULL) {
            head->prev = n;
        }
        head = n;
    }
}

void insert_at_tail(node*& tail)
{
    for (int val = 1;val <= 5;val++) {
        node* newnode = new node(val);
        node* temp = tail;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
        temp = newnode;
    }
}
void insertspecific(node* &tail,node* head, int element, int position) {

    node* newnode = new node(element);
    newnode->next = NULL;
    if (position == 1) {
        insert_at_head(head);
        return;
    }
    node* temp = head;
    int cnt = 1;
    while (cnt != position - 1) {
        if (temp != NULL) {
            temp = temp->next;
            cnt++;
        }
    }
    if (temp == NULL) {
        insert_at_tail(head);
        return;
    }
    newnode->next = temp->next;
    temp->next->prev = newnode;
    temp->next = newnode;
    newnode->prev = temp;
}
void deleteathead(node* &head) {
    if (head != NULL) {
        node* temp = head;
        head = head->next;
        delete temp;
        if (head != NULL)
            head->prev = NULL;
    }
}
void deletion(node* head, int pos) {
    if (pos == 1) {
        deleteathead(head);
        return;
    }

    node* temp = head;
    int cnt = 1;
    while (temp != NULL && cnt != pos) {
        temp = temp->next;
        cnt++;
    }
    temp->prev->next = temp->next;
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }
    delete temp;
}
void deleteAllNodes(node*head) {

    //1. create a temp node
    node* temp ;

    //2. if the head is not null make temp as head and 
    //   move head to head next, then delete the temp,
    //   continue the process till head becomes null
    while (head != NULL) {
        temp = head;
        head = head->next;
        delete temp;
    }

    cout << "All nodes are deleted successfully.\n";
}
void swapNodeValues(node*head,int node1, int node2) {

    //1. count the number of nodes in the list
    node* temp = head;
    int N = 0;
    while (temp != NULL) {
        N++;
        temp = temp->next;
    }

    //2. check if the swap positions are valid entries
    if (node1 < 1 || node1 > N || node2 < 1 || node2 > N)
        return;

    //3. traverse to the nodes where values to be swapped
    node* pos1 = head;
    node* pos2 = head;
    for (int i = 1; i < node1; i++) {
        pos1 = pos1->next;
    }
    for (int i = 1; i < node2; i++) {
        pos2 = pos2->next;
    }

    //4. swap the values of two nodes
    int val = pos1->data;
    pos1->data = pos2->data;
    pos2->data = val;
}

void display(node* head)
{
    node* temp = head;
    if (temp != NULL) {
        while (temp != NULL) {
            cout << temp->data << " <--> ";
            temp = temp->next;
        }
    }
    else
    {
        cout << "NULL" << endl;
    }
    cout << "NULL" << endl;
}

// Driver code
int main()
{
    node* n1 = new node(1);

    node* head = NULL; 
    node* tail = n1;
 
    cout << "After insertion at head: ";
    insert_at_head(head);

    display(head);

    cout << "After insertion at tail: ";
    insert_at_tail(tail);
    display(head);

    cout << "after insertion at specific: ";
    insertspecific(tail,head, 100, 3);
    display(head);
    cout << "LINK LIST AFETR DELETEION :";
    deletion(head,4);
    display(head);
    cout << endl<< "swaping of nodes: ";
    swapNodeValues(head, 2, 3);
    display(head);
    cout << endl<<"REVERSE LINKED LIST: ";
    node* newhead = reverse(head);
    display(newhead);

    
  //  deleteAllNodes(head);
    


    return 0;
}
